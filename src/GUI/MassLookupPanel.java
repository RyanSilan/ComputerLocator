/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import commandexecutor.ObtainComputerModel;
import commandexecutor.ObtainComputerName;
import commandexecutor.ObtainSerialNumber;
import computerlocator.Computer;
import java.io.File;
import java.util.ArrayList;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import javax.swing.table.DefaultTableModel;
import logger.ReadFile;

/**
 *
 * @author silanr
 */
public class MassLookupPanel extends javax.swing.JPanel {

    /**
     * Creates new form MassLookupPanel
     */
    public MassLookupPanel() {
        initComponents();
        jTextArea1.setEditable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lookupButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        computerTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setPreferredSize(new java.awt.Dimension(1079, 818));

        lookupButton.setText("Perform Lookup");
        lookupButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lookupButtonActionPerformed(evt);
            }
        });

        computerTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "IP Address", "Name", "Model", "Serial Number"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(computerTable);

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setText("This tab will read all IP addresses/computer \nnames listed in the following file: \n\nc:\\temp\\massOutputLookupFile\n\nIf that file does not exist, you can create the \nfile, but you must use that exact name. \n\nEach IP address or computer name should be \non a new line\n");
        jScrollPane2.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 383, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(146, 146, 146)
                        .addComponent(lookupButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 566, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lookupButton))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 417, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(96, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void lookupButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lookupButtonActionPerformed

        ReadFile readFile = new ReadFile(outputFile);
        ArrayList<Computer> computerObjectList = readFile.getComputerInformation();
        ArrayList<Thread> threads = new ArrayList<Thread>();
        ExecutorService executor = Executors.newFixedThreadPool(100);

        for (Computer computer : computerObjectList) {

            Thread t = new Thread() {

                @Override
                public void run() {

                    ObtainSerialNumber osn = new ObtainSerialNumber(computer.getIp());
                    ObtainComputerModel ocm = new ObtainComputerModel(computer.getIp());
                    ObtainComputerName ocn = new ObtainComputerName(computer.getIp());

                    osn.run();
                    computer.setSerialNumber(osn.getSerialNumber());

                    if (computer.getSerialNumber().length() > 4) {

                        ocm.run();
                        ocn.run();

                        System.out.println("Serial Number: " + osn.getSerialNumber());

                        computer.setModel(ocm.getComputerModel());
                        computer.setName(ocn.getComputerName());
                    }
                }

            };

            threads.add(t);
            executor.execute(t);

        }

        executor.shutdown();

        while (executor.isTerminated() == false) {

        }

        writeToTable(computerObjectList);

    }//GEN-LAST:event_lookupButtonActionPerformed

    private static void writeToTable(ArrayList<Computer> computerObjectList) {

        int activeRowCount = 0;
        int activeColCount = 0;
        dtm = (DefaultTableModel) computerTable.getModel();

        for (Computer computer : computerObjectList) {

            String[] rowData = {
                computer.getIp(),
                computer.getName(),
                computer.getModel(),
                computer.getSerialNumber()
            };

            activeColCount = 0;

            if (rowData[3].length() > 4) {

                dtm.addRow(rowData);
                activeRowCount++;

            }
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JTable computerTable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JButton lookupButton;
    // End of variables declaration//GEN-END:variables
    private static DefaultTableModel dtm;
    private static File outputFile = new File("c:\\temp\\massLookupOutputFile.txt");
}
