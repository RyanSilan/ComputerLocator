/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import commandexecutor.ObtainPrinterInformation;
import java.io.File;
import java.util.ArrayList;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import javax.swing.table.DefaultTableModel;
import logger.LogPrinters;
import logger.ReadFile;
import printers.Printer;

/**
 * @author silanr
 */
public class PrinterPanel extends javax.swing.JPanel {

    /**
     * Creates new form PrinterPanel
     */
    public PrinterPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        retrieveInformation = new javax.swing.JButton();
        suppliedIpAddress = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        printerTable = new javax.swing.JTable();
        ipAddressLabel = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();

        setPreferredSize(new java.awt.Dimension(1079, 818));

        retrieveInformation.setText("Retrieve Information");
        retrieveInformation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                retrieveInformationActionPerformed(evt);
            }
        });

        suppliedIpAddress.setBackground(new java.awt.Color(240, 240, 240));
        suppliedIpAddress.setBorder(null);
        suppliedIpAddress.setDisabledTextColor(new java.awt.Color(51, 153, 255));
        suppliedIpAddress.setHighlighter(null);
        suppliedIpAddress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                suppliedIpAddressActionPerformed(evt);
            }
        });

        printerTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "IP Address", "Name", "Type"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(printerTable);

        ipAddressLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        ipAddressLabel.setText("IP Address:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(ipAddressLabel)
                        .addGap(45, 45, 45)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(suppliedIpAddress, javax.swing.GroupLayout.DEFAULT_SIZE, 293, Short.MAX_VALUE)
                            .addComponent(jSeparator1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(205, Short.MAX_VALUE)
                        .addComponent(retrieveInformation, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(54, 54, 54)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 566, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(ipAddressLabel)
                            .addComponent(suppliedIpAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, 0)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(retrieveInformation, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 417, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(63, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void retrieveInformationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_retrieveInformationActionPerformed

        if (getSuppliedIpAddress().length() >= 7) {

            LogPrinters logPrinters;
            ReadFile readFile = new ReadFile(file);
            ExecutorService executor = Executors.newFixedThreadPool(100);
            ObtainPrinterInformation opi = new ObtainPrinterInformation(getSuppliedIpAddress());

            //clear table
            dtm = (DefaultTableModel) printerTable.getModel();
            dtm.setRowCount(0);

            Thread a = new Thread() {
                @Override
                public void run() {
                    opi.run();
                }
            };

            executor.execute(a);
            executor.shutdown();

            //wait for threads to finish
            while (executor.isTerminated() == false) {

            }

            writeToTable(opi.getPrinterArray());
        }
    }//GEN-LAST:event_retrieveInformationActionPerformed

    private void suppliedIpAddressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_suppliedIpAddressActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_suppliedIpAddressActionPerformed

    private String getSuppliedIpAddress() {
        return suppliedIpAddress.getText();
    }

    private void writeToTable(ArrayList<Printer> printerObjectList) {

        int activeRowCount = 0;
        int activeColCount = 0;
        dtm = (DefaultTableModel) printerTable.getModel();

        for (Printer printer : printerObjectList) {

            String[] rowData = {
                printer.getIp(),
                printer.getName()
            };

            activeColCount = 0;
            dtm.addRow(rowData);
            activeRowCount++;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ipAddressLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable printerTable;
    private javax.swing.JButton retrieveInformation;
    private javax.swing.JTextField suppliedIpAddress;
    // End of variables declaration//GEN-END:variables
    File file = new File("c:\\temp\\PrinterLog.txt");
    DefaultTableModel dtm;
}
