/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import commandexecutor.ObtainComputerModel;
import commandexecutor.ObtainComputerName;
import commandexecutor.ObtainSerialNumber;
import computerlocator.Computer;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import logger.LogComputers;
import logger.ReadFile;

/**
 *
 * @author silanr
 */
public class LookupByIPAddressPanel extends javax.swing.JPanel {

    /**
     * Creates new form LookupByIPAddressPanel
     */
    public LookupByIPAddressPanel() {
        initComponents();
        ReadFile readFile = new ReadFile(outputFile);
        writeToTable(readFile.getComputerInformation());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        clearContentsButton = new javax.swing.JButton();
        computerSNLabel = new javax.swing.JLabel();
        computerName = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        computerModel = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        computerSerialNumber = new javax.swing.JLabel();
        jSeparator4 = new javax.swing.JSeparator();
        retrieveInformation = new javax.swing.JButton();
        suppliedIpAddress = new javax.swing.JTextField();
        computerNameLabel = new javax.swing.JLabel();
        computerModelLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        computerTable = new javax.swing.JTable();
        ipAddressLabel = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();

        setPreferredSize(new java.awt.Dimension(1079, 818));

        clearContentsButton.setText("Clear Table Contents");
        clearContentsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearContentsButtonActionPerformed(evt);
            }
        });

        computerSNLabel.setText("Computer SN:");

        retrieveInformation.setText("Retrieve Information");
        retrieveInformation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                retrieveInformationActionPerformed(evt);
            }
        });

        suppliedIpAddress.setBackground(new java.awt.Color(240, 240, 240));
        suppliedIpAddress.setBorder(null);
        suppliedIpAddress.setDisabledTextColor(new java.awt.Color(51, 153, 255));
        suppliedIpAddress.setHighlighter(null);
        suppliedIpAddress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                suppliedIpAddressActionPerformed(evt);
            }
        });

        computerNameLabel.setText("Computer Name: ");

        computerModelLabel.setText("Computer Model:");

        computerTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "IP Address", "Name", "Model", "Serial Number"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(computerTable);

        ipAddressLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        ipAddressLabel.setText("IP Address:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addComponent(ipAddressLabel))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(computerNameLabel))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(computerSNLabel))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(computerModelLabel)))
                        .addGap(13, 13, 13)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jSeparator2, javax.swing.GroupLayout.DEFAULT_SIZE, 293, Short.MAX_VALUE)
                            .addComponent(suppliedIpAddress)
                            .addComponent(jSeparator1)
                            .addComponent(computerName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(computerModel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jSeparator3, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jSeparator4)
                            .addComponent(computerSerialNumber, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 201, Short.MAX_VALUE)
                        .addComponent(retrieveInformation, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(86, 86, 86)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 566, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(clearContentsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 489, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(71, 71, 71))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(ipAddressLabel)
                            .addComponent(suppliedIpAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, 0)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(retrieveInformation, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(computerName, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(computerNameLabel))
                        .addGap(1, 1, 1)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(computerModel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(computerModelLabel))
                        .addGap(2, 2, 2)
                        .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(computerSNLabel)
                            .addComponent(computerSerialNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, 0)
                        .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 417, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(clearContentsButton)))
                .addContainerGap(308, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void clearContentsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearContentsButtonActionPerformed
        try {
            LogComputers log = new LogComputers(outputFile);
            log.clearContents();
        } catch (IOException ex) {
            Logger.getLogger(MainScreenUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        dtm = (DefaultTableModel) computerTable.getModel();
        dtm.setRowCount(0);
    }//GEN-LAST:event_clearContentsButtonActionPerformed

    private void retrieveInformationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_retrieveInformationActionPerformed

        if (getSuppliedIpAddress().length() >= 7) {

            ExecutorService executor = Executors.newFixedThreadPool(100);
            LogComputers log;
            ReadFile readFile;
            Computer computer = new Computer(getSuppliedIpAddress());
            ObtainSerialNumber obtainSerialNumber = new ObtainSerialNumber(getSuppliedIpAddress());
            ObtainComputerModel obtainComputerModel = new ObtainComputerModel(getSuppliedIpAddress());
            ObtainComputerName obtainComputerName = new ObtainComputerName(getSuppliedIpAddress());

            //clear table
            dtm = (DefaultTableModel) computerTable.getModel();
            dtm.setRowCount(0);

            Thread a = new Thread() {
                @Override
                public void run() {
                    obtainSerialNumber.run();
                }
            };

            Thread b = new Thread() {
                @Override
                public void run() {
                    obtainComputerModel.run();
                }
            };

            Thread c = new Thread() {
                @Override
                public void run() {
                    obtainComputerName.run();
                }
            };

            executor.execute(a);
            executor.execute(b);
            executor.execute(c);
            executor.shutdown();

            //wait for threads to finish
            while (executor.isTerminated() == false) {

            }

            computer.setIp(getSuppliedIpAddress());
            computer.setSerialNumber(obtainSerialNumber.getSerialNumber());
            computer.setModel(obtainComputerModel.getComputerModel());
            computer.setName(obtainComputerName.getComputerName());

            computerSerialNumber.setText(computer.getSerialNumber());
            computerModel.setText(computer.getModel());
            computerName.setText(computer.getName());

            try {
                log = new LogComputers(outputFile);
                log.writeToFile(computer.getSerialNumber(), computer.getModel(), computer.getName(), computer.getIp());
                log.closeWriter();
            } catch (IOException ex) {
                Logger.getLogger(MainScreenUI.class.getName()).log(Level.SEVERE, null, ex);
            }

            readFile = new ReadFile(outputFile);
            writeToTable(readFile.getComputerInformation());
        }
    }//GEN-LAST:event_retrieveInformationActionPerformed

    private void suppliedIpAddressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_suppliedIpAddressActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_suppliedIpAddressActionPerformed

    private String getSuppliedIpAddress() {
        return suppliedIpAddress.getText();
    }

    private static void writeToTable(ArrayList<Computer> computerObjectList) {

        int activeRowCount = 0;
        int activeColCount = 0;
        dtm = (DefaultTableModel) computerTable.getModel();

        for (Computer computer : computerObjectList) {

            String[] rowData = {
                computer.getIp(),
                computer.getName(),
                computer.getModel(),
                computer.getSerialNumber()
            };

            activeColCount = 0;
            dtm.addRow(rowData);
            activeRowCount++;
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clearContentsButton;
    private javax.swing.JLabel computerModel;
    private javax.swing.JLabel computerModelLabel;
    private javax.swing.JLabel computerName;
    private javax.swing.JLabel computerNameLabel;
    private javax.swing.JLabel computerSNLabel;
    private javax.swing.JLabel computerSerialNumber;
    private static javax.swing.JTable computerTable;
    private javax.swing.JLabel ipAddressLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JButton retrieveInformation;
    private javax.swing.JTextField suppliedIpAddress;
    // End of variables declaration//GEN-END:variables
    private static DefaultTableModel dtm;
    File outputFile = new File("c:\\temp\\ComputerInfoList.txt");
}
